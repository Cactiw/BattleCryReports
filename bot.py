from telegram.ext import CommandHandler, MessageHandler, Filters

import logging
import datetime
import re


from work_materials.globals import updater, dispatcher, job, POST_CHANNEL_ID, local_tz, moscow_tz, cursor, TEST_CHANNEL_ID
from work_materials.filters.report_filters import filter_correct_report, filter_incorrect_report, filter_not_forward_report, \
    filter_not_report, filter_old_battle_cry, filter_not_pm

#   –í—ã—Å—Ç–∞–≤–ª—è–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–≤–∞–Ω–∏–µ
console = logging.StreamHandler()
console.setLevel(logging.INFO)

log_file = logging.FileHandler(filename='error.log', mode='a')
log_file.setLevel(logging.ERROR)

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level = logging.INFO, handlers=[log_file, console])

def start(bot, update):
    bot.send_message(chat_id=update.message.chat_id, text="–ü—Ä–∏–≤–µ—Ç! –ö–∏–Ω—å –º–Ω–µ —Ñ–æ—Ä–≤–∞—Ä–¥ —Ä–µ–ø–æ—Ä—Ç–∞ —Å —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏–º Battle cry!")

def help(bot, update):
    response = "–≠—Ç–æ—Ç –±–æ—Ç —Å–ª—É–∂–∏—Ç –¥–ª—è –ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∫–∏–ª–ª–∞ Battle Cry —Ä—ã—Ü–∞—Ä–µ–π 50+ —É—Ä–æ–≤–Ω–µ–π.\n" \
               "–î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ä–≤–∞—Ä–¥ –æ—Ç–≤–µ—Ç–∞ @ChatWarsBot –Ω–∞ –∫–æ–º–∞–Ω–¥—É "\
               "/report —Å –Ω–∞–ª–∏—á–∏–µ–º —Å—Ä–∞–±–æ—Ç–∞–≤—à–µ–≥–æ —Å–∫–∏–ª–ª–∞ Battle Cry."
    bot.send_message(chat_id=update.message.chat_id, text = response)

def report_handling(bot, update):
    mes = update.message
    nickname = mes.text.partition("‚öî")[0][:-1]
    inspired_by = mes.text.partition("–¢–µ–±—è –≤–¥–æ—Ö–Ω–æ–≤–∏–ª ")[2].splitlines()[0]
    message_datetime = local_tz.localize(update.message.forward_date).astimezone(tz=moscow_tz).replace(tzinfo = None)
    time = message_datetime - message_datetime.replace(hour = 0, minute = 0, second = 0, microsecond = 0)
    if time < datetime.timedelta(hours=1):  #   –î–Ω–µ–≤–Ω–∞—è –±–∏—Ç–≤–∞ –ø—Ä–æ—à–ª–æ–≥–æ –¥–Ω—è
        message_datetime -= datetime.timedelta(days=1)
        battle_time = message_datetime.replace(hour = 17, minute = 0, second = 0, microsecond = 0)
    else:
        battle_time = datetime.datetime.combine(message_datetime.date(), datetime.time(hour=1))
        while message_datetime - battle_time >= datetime.timedelta(hours=8):
            battle_time += datetime.timedelta(hours = 8)
    request = "select nickname from inspirations where nickname = %s and battle_time = %s"
    cursor.execute(request, (nickname, battle_time))
    row = cursor.fetchone()
    if row is not None:
        bot.send_message(chat_id=update.message.chat_id, text="–î–∞–Ω–Ω—ã–π —Ä–µ–ø–æ—Ä—Ç —É–∂–µ –µ—Å—Ç—å –Ω–∞ –∫–∞–Ω–∞–ª–µ!")
        return
    tag = re.search("\\[(\\S+)\\]", nickname)
    if tag:
        tag = tag.group(1)
        inspired_by = "[ü§∑üèø‚Äç‚ôÄÔ∏è/{}]{}".format(tag, inspired_by)
    response = "‚ö°Ô∏è<b>{0}</b> was inspired by <b>{1}</b>\n\nüïí Battle on {2}".format(nickname, inspired_by, battle_time.strftime("%D %H:%M"))
    bot.send_message(chat_id = POST_CHANNEL_ID, text = response, parse_mode = 'HTML')
    bot.send_message(chat_id = mes.chat_id, text = "–°–ø–∞—Å–∏–±–æ! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –∫–∞–Ω–∞–ª\n–ú–æ–∂–µ—à—å –∫–∏–¥–∞—Ç—å —Å—é–¥–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–ø–æ—Ä—Ç—ã")
    castle = nickname[0]
    request = "insert into inspirations(castle, nickname, inspured_by_nickname, battle_time) values (%s, %s, %s, %s)"
    cursor.execute(request, (castle, nickname, inspired_by, battle_time))

def old_battle_cry(bot, update):
    bot.send_message(chat_id = update.message.chat_id,
                     text = "–í —ç—Ç–æ–º —Ä–µ–ø–æ—Ä—Ç–µ —Å–∫–∏–ª–ª Battle Cry –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –≤–µ—Ä—Å–∏–∏. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫—Ç–æ –∏–º–µ–Ω–Ω–æ –í–∞—Å –≤–¥–æ—Ö–Ω–æ–≤–∏–ª.")



def clear_report(bot, update):
    bot.send_message(chat_id=update.message.chat_id, text="–í —ç—Ç–æ–º —Ä–µ–ø–æ—Ä—Ç–µ –Ω–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∞ Battle Cry!")

def not_forward_report(bot, update):
    bot.send_message(chat_id=update.message.chat_id, text="–†–µ–ø–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–æ—Ä–≤–∞—Ä–¥–æ–º —Å @ChatWarsBot. "
                                                          "\n\n<em>–ú—ã –Ω–∏–∫–∞–∫ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –Ω–µ —Ö—Ä–∞–Ω–∏–º –≤–∞—à–∏ —Å—Ç–∞—Ç—ã –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∏—Ç–≤—ã.</em>",
                     parse_mode='HTML')

def not_report(bot, update):
    bot.send_message(chat_id=update.message.chat_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ä–≤–∞—Ä–¥ –æ—Ç–≤–µ—Ç–∞ @ChatWarsBot –Ω–∞ –∫–æ–º–∞–Ω–¥—É "
                                                          "/report —Å –Ω–∞–ª–∏—á–∏–µ–º —Å—Ä–∞–±–æ—Ç–∞–≤—à–µ–≥–æ —Å–∫–∏–ª–ª–∞ Battle Cry!")

def skip(bot, update):
    return

dispatcher.add_handler(MessageHandler(filter_not_pm, skip))
dispatcher.add_handler(CommandHandler('start', start))
dispatcher.add_handler(CommandHandler('help', help))

dispatcher.add_handler(MessageHandler(Filters.text & filter_correct_report, report_handling))

dispatcher.add_handler(MessageHandler(Filters.text & filter_old_battle_cry, old_battle_cry))
dispatcher.add_handler(MessageHandler(Filters.text & filter_incorrect_report, clear_report))
dispatcher.add_handler(MessageHandler(Filters.text & filter_not_forward_report, not_forward_report))
dispatcher.add_handler(MessageHandler(Filters.text & filter_not_report, not_report))



updater.start_polling(clean=False)

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞, –µ—Å–ª–∏ –±—ã–ª–∏ –Ω–∞–∂–∞—Ç—ã Ctrl + C
updater.idle()